
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.6.0
 * Query Engine version: dc520b92b1ebb2d28dc3161f9f82e875bd35d727
 */
Prisma.prismaVersion = {
  client: "3.6.0",
  engine: "dc520b92b1ebb2d28dc3161f9f82e875bd35d727"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AccessRightsScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  AccessRightKey: 'AccessRightKey',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate',
  Status: 'Status'
});

exports.Prisma.AppIdentityRolesScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  NormalizedName: 'NormalizedName',
  ConcurrencyStamp: 'ConcurrencyStamp'
});

exports.Prisma.AppStreamConfigurationsScalarFieldEnum = makeEnum({
  Id: 'Id',
  RegionEndPoint: 'RegionEndPoint',
  FleetName: 'FleetName',
  StackName: 'StackName',
  ApplicationID: 'ApplicationID',
  AuthenticationType: 'AuthenticationType',
  URLValidityTime: 'URLValidityTime',
  AWSConfigurationsId: 'AWSConfigurationsId',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.AppStreamUserConnectorsScalarFieldEnum = makeEnum({
  Id: 'Id',
  AppStreamARN: 'AppStreamARN',
  AppStreamUserName: 'AppStreamUserName',
  AppStreamEmailId: 'AppStreamEmailId',
  AppStreamConfiguration_Id: 'AppStreamConfiguration_Id',
  User_Id: 'User_Id',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.AuditEntitiesScalarFieldEnum = makeEnum({
  Id: 'Id',
  Type: 'Type',
  ActionBy: 'ActionBy',
  Details: 'Details',
  CreatedDate: 'CreatedDate',
  UserAgent: 'UserAgent',
  IPAddress: 'IPAddress'
});

exports.Prisma.AuditLogsScalarFieldEnum = makeEnum({
  Id: 'Id',
  Resource: 'Resource',
  Resource_Id: 'Resource_Id',
  UserAction_Actionkey: 'UserAction_Actionkey',
  UserType: 'UserType',
  Repository_Id: 'Repository_Id',
  ActionBy: 'ActionBy',
  Details: 'Details',
  CreatedDate: 'CreatedDate',
  UserAgent: 'UserAgent',
  IPAddress: 'IPAddress'
});

exports.Prisma.AWSConfigurationsScalarFieldEnum = makeEnum({
  Id: 'Id',
  AccessKey: 'AccessKey',
  Secretkey: 'Secretkey',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.CreateElementNotificationsScalarFieldEnum = makeEnum({
  Id: 'Id',
  Repository_Id: 'Repository_Id',
  EnableNotification: 'EnableNotification',
  User_Id: 'User_Id',
  UserGroup_Id: 'UserGroup_Id',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.DashboardReviewUserRolesScalarFieldEnum = makeEnum({
  Id: 'Id',
  DashboardId: 'DashboardId',
  UserRole: 'UserRole'
});

exports.Prisma.DashboardsScalarFieldEnum = makeEnum({
  Id: 'Id',
  RepositoryId: 'RepositoryId',
  Name: 'Name',
  Notes: 'Notes',
  Logo: 'Logo',
  IsEnabled: 'IsEnabled',
  CreatedBy: 'CreatedBy',
  Created: 'Created',
  Modified: 'Modified',
  IsDefault: 'IsDefault',
  DisplayDescription: 'DisplayDescription',
  Type: 'Type',
  UserType: 'UserType',
  DashboardSettings: 'DashboardSettings',
  Template: 'Template'
});

exports.Prisma.DashboardUserDefaultScalarFieldEnum = makeEnum({
  Id: 'Id',
  UserId: 'UserId',
  RepositoryId: 'RepositoryId',
  DashboardId: 'DashboardId',
  Type: 'Type'
});

exports.Prisma.DashboardUserGroupsScalarFieldEnum = makeEnum({
  Id: 'Id',
  DashboardId: 'DashboardId',
  UserGroupId: 'UserGroupId'
});

exports.Prisma.DashboardUsersScalarFieldEnum = makeEnum({
  Id: 'Id',
  DashboardId: 'DashboardId',
  UserId: 'UserId'
});

exports.Prisma.DashboardWidgetBlocksScalarFieldEnum = makeEnum({
  Id: 'Id',
  DashboardWidgetId: 'DashboardWidgetId',
  DashboardWidgetBlockTypeId: 'DashboardWidgetBlockTypeId',
  Title: 'Title',
  Notes: 'Notes',
  EAArtifactGuid: 'EAArtifactGuid',
  IsConfigured: 'IsConfigured',
  Position: 'Position'
});

exports.Prisma.DashboardWidgetBlockTypesScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Notes: 'Notes',
  Category: 'Category',
  Position: 'Position',
  NotSetText: 'NotSetText',
  ConfigurationRequired: 'ConfigurationRequired',
  IsEnabled: 'IsEnabled',
  Icon: 'Icon'
});

exports.Prisma.DashboardWidgetsScalarFieldEnum = makeEnum({
  Id: 'Id',
  DashboardId: 'DashboardId',
  Name: 'Name',
  Notes: 'Notes',
  RowId: 'RowId',
  ColumnId: 'ColumnId',
  ConfigData: 'ConfigData',
  SizeX: 'SizeX',
  SizeY: 'SizeY',
  WidgetSettings: 'WidgetSettings',
  Template: 'Template',
  X: 'X',
  Y: 'Y',
  Rows: 'Rows',
  Cols: 'Cols'
});

exports.Prisma.DocumentationRequestsScalarFieldEnum = makeEnum({
  Id: 'Id',
  Repository_Id: 'Repository_Id',
  User_Id: 'User_Id',
  UserDefinedTemplate: 'UserDefinedTemplate',
  InclusionList: 'InclusionList',
  ExclusionList: 'ExclusionList',
  FileName: 'FileName',
  IsCancelled: 'IsCancelled',
  IsProcessed: 'IsProcessed',
  Created: 'Created',
  Modified: 'Modified'
});

exports.Prisma.DomainRestrictionsScalarFieldEnum = makeEnum({
  Id: 'Id',
  Domain: 'Domain',
  IsEnabled: 'IsEnabled',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.EAChangelogAttributesScalarFieldEnum = makeEnum({
  Id: 'Id',
  EAChangelogId: 'EAChangelogId',
  PropertyGuid: 'PropertyGuid',
  Name: 'Name',
  CurrentValue: 'CurrentValue',
  PreviousValue: 'PreviousValue',
  ActionType: 'ActionType',
  AttributeType: 'AttributeType',
  CreatedDate: 'CreatedDate'
});

exports.Prisma.EAChangelogsScalarFieldEnum = makeEnum({
  Id: 'Id',
  Repository_Id: 'Repository_Id',
  ArtifactGuid: 'ArtifactGuid',
  ArtifactType: 'ArtifactType',
  ActionType: 'ActionType',
  Revision: 'Revision',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.ElementConnectorsScalarFieldEnum = makeEnum({
  Id: 'Id',
  ElementGuid: 'ElementGuid',
  ElementType: 'ElementType',
  Repository_Id: 'Repository_Id',
  User_Id: 'User_Id',
  UserGroup_Id: 'UserGroup_Id',
  AccessRight_AccessRightKey: 'AccessRight_AccessRightKey',
  InheritRight: 'InheritRight',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate',
  Status: 'Status',
  CreatedBy: 'CreatedBy',
  FeatureId: 'FeatureId',
  OtherInfo: 'OtherInfo'
});

exports.Prisma.ExternalAppAttributeMasterScalarFieldEnum = makeEnum({
  Id: 'Id',
  ExternalAppTypeId: 'ExternalAppTypeId',
  ExternalAppId: 'ExternalAppId',
  RepositoryId: 'RepositoryId',
  Name: 'Name',
  InternalName: 'InternalName',
  ExternalName: 'ExternalName',
  HelpText: 'HelpText',
  MultiSelect: 'MultiSelect',
  Filters: 'Filters',
  ConfigData: 'ConfigData',
  IsEnabled: 'IsEnabled',
  Created: 'Created',
  Modified: 'Modified',
  Description: 'Description'
});

exports.Prisma.ExternalAppAttributesScalarFieldEnum = makeEnum({
  Id: 'Id',
  ExternalAppAttributeMasterId: 'ExternalAppAttributeMasterId',
  ExternalAppProjectId: 'ExternalAppProjectId',
  ArtifactId: 'ArtifactId',
  InternalValue: 'InternalValue',
  ExternalValue: 'ExternalValue',
  ConfigData: 'ConfigData',
  IsDeleted: 'IsDeleted',
  RemoteLinkId: 'RemoteLinkId',
  Created: 'Created',
  Modified: 'Modified'
});

exports.Prisma.ExternalAppsScalarFieldEnum = makeEnum({
  Id: 'Id',
  ExternalAppTypeId: 'ExternalAppTypeId',
  ExternalAppEnvironment: 'ExternalAppEnvironment',
  RepositoryId: 'RepositoryId',
  Name: 'Name',
  Description: 'Description',
  EndPointURL: 'EndPointURL',
  IsExternal: 'IsExternal',
  ExternalPath: 'ExternalPath',
  Username: 'Username',
  Password: 'Password',
  ProjectId: 'ProjectId',
  ProjectName: 'ProjectName',
  ConfigData: 'ConfigData',
  IsEnabled: 'IsEnabled',
  Created: 'Created',
  Modified: 'Modified'
});

exports.Prisma.ExternalAppTypesScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Description: 'Description',
  IsExternal: 'IsExternal',
  ExternalPath: 'ExternalPath',
  Logo: 'Logo',
  Position: 'Position',
  IsEnabled: 'IsEnabled',
  AppContent: 'AppContent'
});

exports.Prisma.FeaturesScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Status: 'Status',
  CreatedDate: 'CreatedDate',
  FeatureKey: 'FeatureKey'
});

exports.Prisma.FilterProfileConnectorsScalarFieldEnum = makeEnum({
  Id: 'Id',
  RepositoryId: 'RepositoryId',
  ProfileId: 'ProfileId',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate',
  CreatedBy: 'CreatedBy',
  ModifiedBy: 'ModifiedBy'
});

exports.Prisma.FilterProfilesScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Type: 'Type',
  Status: 'Status',
  Configuration: 'Configuration',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate',
  CreatedBy: 'CreatedBy',
  ModifiedBy: 'ModifiedBy',
  IsCacheEnabled: 'IsCacheEnabled'
});

exports.Prisma.GlobalRepositoryConfigurationsScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  IsReadOnly: 'IsReadOnly',
  RepositoryConfiguration: 'RepositoryConfiguration',
  AllowAllRepository: 'AllowAllRepository',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.GroupFeaturesScalarFieldEnum = makeEnum({
  Id: 'Id',
  UserGroup_Id: 'UserGroup_Id',
  Feature_Id: 'Feature_Id',
  CreatedDate: 'CreatedDate',
  Status: 'Status'
});

exports.Prisma.GuestSignupSettingsScalarFieldEnum = makeEnum({
  Id: 'Id',
  GlobalRepoConfigId: 'GlobalRepoConfigId',
  AllowAllRepository: 'AllowAllRepository',
  RepositoryPermissions: 'RepositoryPermissions',
  Status: 'Status',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.IdPConnectionsScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  SigninUrl: 'SigninUrl',
  CertificatePath: 'CertificatePath',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate',
  Status: 'Status',
  AllowAllRepository: 'AllowAllRepository',
  RepositoryPermissions: 'RepositoryPermissions',
  RepositoryPermissionId: 'RepositoryPermissionId',
  IdPSource: 'IdPSource',
  LogoutUrl: 'LogoutUrl',
  IDPCertificateEncrypted: 'IDPCertificateEncrypted',
  SPCertificateEncrypted: 'SPCertificateEncrypted',
  SPCertificatePath: 'SPCertificatePath',
  SPCertificatePassword: 'SPCertificatePassword',
  GlobalRepoConfigId: 'GlobalRepoConfigId',
  AttributesMapping: 'AttributesMapping'
});

exports.Prisma.LDAPConnectionsScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Server: 'Server',
  Port: 'Port',
  Domain: 'Domain',
  UserName: 'UserName',
  Password: 'Password',
  SSL: 'SSL',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate',
  Status: 'Status'
});

exports.Prisma.MDGProfileConnectorsScalarFieldEnum = makeEnum({
  Id: 'Id',
  UserGroupId: 'UserGroupId',
  ProfileId: 'ProfileId',
  MdgId: 'MdgId',
  RepositoryId: 'RepositoryId',
  Status: 'Status',
  CreatedDate: 'CreatedDate'
});

exports.Prisma.MDGTechnologiesScalarFieldEnum = makeEnum({
  Id: 'Id',
  Repository_Id: 'Repository_Id',
  Name: 'Name',
  InternalName: 'InternalName',
  Description: 'Description',
  XmlContent: 'XmlContent',
  BuiltIn: 'BuiltIn',
  IsEnabled: 'IsEnabled',
  Created: 'Created',
  Modified: 'Modified'
});

exports.Prisma.MenuItemProfileConnectorsScalarFieldEnum = makeEnum({
  Id: 'Id',
  Repository_Id: 'Repository_Id',
  User_Id: 'User_Id',
  UserGroup_Id: 'UserGroup_Id',
  Profile_Id: 'Profile_Id',
  Default_Profile_Id: 'Default_Profile_Id',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.MenuItemProfilesScalarFieldEnum = makeEnum({
  Id: 'Id',
  Repository_Id: 'Repository_Id',
  Name: 'Name',
  Type: 'Type',
  Status: 'Status',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.MenuItemProfileSettingsScalarFieldEnum = makeEnum({
  Id: 'Id',
  Profile_Id: 'Profile_Id',
  MenuItemKey: 'MenuItemKey',
  IsVisible: 'IsVisible',
  IfShowOnlyContent: 'IfShowOnlyContent',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.MenuViewHistoryScalarFieldEnum = makeEnum({
  Id: 'Id',
  RepositoryId: 'RepositoryId',
  UserId: 'UserId',
  PageKeys: 'PageKeys',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.OIDCApplicationsScalarFieldEnum = makeEnum({
  Id: 'Id',
  ClientId: 'ClientId',
  ClientSecret: 'ClientSecret',
  ConcurrencyToken: 'ConcurrencyToken',
  ConsentType: 'ConsentType',
  DisplayName: 'DisplayName',
  DisplayNames: 'DisplayNames',
  Permissions: 'Permissions',
  PostLogoutRedirectUris: 'PostLogoutRedirectUris',
  Properties: 'Properties',
  RedirectUris: 'RedirectUris',
  Requirements: 'Requirements',
  Type: 'Type'
});

exports.Prisma.OIDCAuthorizationsScalarFieldEnum = makeEnum({
  Id: 'Id',
  ApplicationId: 'ApplicationId',
  ConcurrencyToken: 'ConcurrencyToken',
  CreationDate: 'CreationDate',
  Properties: 'Properties',
  Scopes: 'Scopes',
  Status: 'Status',
  Subject: 'Subject',
  Type: 'Type'
});

exports.Prisma.OIDCScopesScalarFieldEnum = makeEnum({
  Id: 'Id',
  ConcurrencyToken: 'ConcurrencyToken',
  Description: 'Description',
  Descriptions: 'Descriptions',
  DisplayName: 'DisplayName',
  DisplayNames: 'DisplayNames',
  Name: 'Name',
  Properties: 'Properties',
  Resources: 'Resources'
});

exports.Prisma.OIDCTokensScalarFieldEnum = makeEnum({
  Id: 'Id',
  ApplicationId: 'ApplicationId',
  AuthorizationId: 'AuthorizationId',
  ConcurrencyToken: 'ConcurrencyToken',
  CreationDate: 'CreationDate',
  ExpirationDate: 'ExpirationDate',
  Payload: 'Payload',
  Properties: 'Properties',
  RedemptionDate: 'RedemptionDate',
  ReferenceId: 'ReferenceId',
  Status: 'Status',
  Subject: 'Subject',
  Type: 'Type'
});

exports.Prisma.ProfilesScalarFieldEnum = makeEnum({
  Id: 'Id',
  MDGTechnology_Id: 'MDGTechnology_Id',
  Name: 'Name',
  Description: 'Description',
  ProfileContent: 'ProfileContent',
  IsDefault: 'IsDefault',
  IsEnabled: 'IsEnabled',
  Created: 'Created',
  Modified: 'Modified',
  EnableTechnologyGroup: 'EnableTechnologyGroup',
  EnableInheritedGroup: 'EnableInheritedGroup',
  IncludeBaseAttributes: 'IncludeBaseAttributes'
});

exports.Prisma.PropertyMenuItemConnectorsScalarFieldEnum = makeEnum({
  Id: 'Id',
  MenuItemKey: 'MenuItemKey',
  PageType: 'PageType',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.PropertyMenuItemsScalarFieldEnum = makeEnum({
  Id: 'Id',
  MenuItemKey: 'MenuItemKey',
  Name: 'Name',
  Description: 'Description',
  IconClass: 'IconClass',
  Position: 'Position',
  Status: 'Status',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.RepositoriesScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Alias: 'Alias',
  Description: 'Description',
  EAPFile: 'EAPFile',
  IsCacheEnabled: 'IsCacheEnabled',
  AuthRequired: 'AuthRequired',
  UserName: 'UserName',
  Password: 'Password',
  IsEnabled: 'IsEnabled',
  InstanceCount: 'InstanceCount',
  Created: 'Created',
  Modified: 'Modified',
  Status: 'Status',
  Protocol: 'Protocol',
  Server: 'Server',
  Port: 'Port',
  Model: 'Model',
  OslcAccessCode: 'OslcAccessCode',
  EAUserAuth: 'EAUserAuth',
  UserIdentifier: 'UserIdentifier',
  DBType: 'DBType'
});

exports.Prisma.RepositoryConnectorsScalarFieldEnum = makeEnum({
  Id: 'Id',
  Repository_Id: 'Repository_Id',
  User_Id: 'User_Id',
  UserGroup_Id: 'UserGroup_Id',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate',
  Status: 'Status',
  Dashboard_Id: 'Dashboard_Id',
  EAUserAuth: 'EAUserAuth',
  IsUserDefault: 'IsUserDefault'
});

exports.Prisma.RepositoryDBConnectionsScalarFieldEnum = makeEnum({
  Id: 'Id',
  Repository_Id: 'Repository_Id',
  CreateElement: 'CreateElement',
  ConnectionType: 'ConnectionType',
  ConnectionDetail: 'ConnectionDetail',
  DBType: 'DBType',
  Server: 'Server',
  Port: 'Port',
  DBName: 'DBName',
  Username: 'Username',
  Password: 'Password',
  DsnName: 'DsnName',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.RequestLogsScalarFieldEnum = makeEnum({
  Id: 'Id',
  RequestedUserId: 'RequestedUserId',
  DesignatedUserId: 'DesignatedUserId',
  Url: 'Url',
  UrlType: 'UrlType',
  RequestedUserAgent: 'RequestedUserAgent',
  RequestedUserIpAddress: 'RequestedUserIpAddress',
  DesignatedUserAgent: 'DesignatedUserAgent',
  DesignatedUserIpAddress: 'DesignatedUserIpAddress',
  Created: 'Created',
  Modified: 'Modified',
  LastVisited: 'LastVisited',
  Status: 'Status',
  Validity: 'Validity'
});

exports.Prisma.ReservedUsersScalarFieldEnum = makeEnum({
  Id: 'Id',
  User_Id: 'User_Id',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.ResourceFilesScalarFieldEnum = makeEnum({
  Id: 'Id',
  MapItemId: 'MapItemId',
  FileContent: 'FileContent',
  FilePath: 'FilePath',
  Extension: 'Extension',
  Name: 'Name',
  ModifiedDate: 'ModifiedDate',
  CreatedDate: 'CreatedDate'
});

exports.Prisma.ResourcesScalarFieldEnum = makeEnum({
  Id: 'Id',
  ResourceName: 'ResourceName'
});

exports.Prisma.ReviewProcessesScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Notes: 'Notes',
  ReviewStartDate: 'ReviewStartDate',
  ReviewEndDate: 'ReviewEndDate',
  ApproveStartDate: 'ApproveStartDate',
  ApproveEndDate: 'ApproveEndDate',
  WorkFlow: 'WorkFlow',
  AutoStatusUpdate: 'AutoStatusUpdate',
  ReviewStartType: 'ReviewStartType',
  ElementRecursiveSelection: 'ElementRecursiveSelection',
  ExternalUsersInvite: 'ExternalUsersInvite',
  EnableShare: 'EnableShare',
  EmailNotification: 'EmailNotification',
  Mode: 'Mode',
  Repository_Id: 'Repository_Id',
  User_Id: 'User_Id',
  Status: 'Status',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.TaggedValuesScalarFieldEnum = makeEnum({
  Id: 'Id',
  RepositoryId: 'RepositoryId',
  Name: 'Name',
  Description: 'Description',
  Type: 'Type',
  DefaultValue: 'DefaultValue',
  AttributeValues: 'AttributeValues',
  LowerBound: 'LowerBound',
  UpperBound: 'UpperBound',
  Stereotypes: 'Stereotypes',
  AppliesTo: 'AppliesTo',
  BaseStereotype: 'BaseStereotype'
});

exports.Prisma.TraceabilityTreeProfilesScalarFieldEnum = makeEnum({
  Id: 'Id',
  ProfileName: 'ProfileName',
  RepositoryId: 'RepositoryId',
  ElementGuid: 'ElementGuid',
  Type: 'Type',
  SteroType: 'SteroType',
  FQName: 'FQName',
  Technology: 'Technology',
  TemplateOptions: 'TemplateOptions',
  User_Id: 'User_Id',
  Status: 'Status',
  IsApplytoAll: 'IsApplytoAll',
  IsApplytoType: 'IsApplytoType',
  IsApplytoSteroType: 'IsApplytoSteroType',
  Created: 'Created',
  Modified: 'Modified',
  ElementTypeList: 'ElementTypeList',
  ConnectorTypeList: 'ConnectorTypeList',
  FlowDirectionTypeList: 'FlowDirectionTypeList',
  TreeType: 'TreeType'
});

exports.Prisma.TraceabilityTreeViewsScalarFieldEnum = makeEnum({
  Id: 'Id',
  RepositoryId: 'RepositoryId',
  ElementGuid: 'ElementGuid',
  TreeViewData: 'TreeViewData',
  User_Id: 'User_Id',
  Created: 'Created',
  Modified: 'Modified',
  FilterItems: 'FilterItems',
  Tittle: 'Tittle',
  Revision: 'Revision',
  ViewId: 'ViewId',
  TemplateOptions: 'TemplateOptions',
  Description: 'Description',
  NlFilterItems: 'NlFilterItems',
  NlTreeData: 'NlTreeData',
  NlFilterItemStatus: 'NlFilterItemStatus',
  FilterAppliedNodeList: 'FilterAppliedNodeList',
  TotForceLinks: 'TotForceLinks'
});

exports.Prisma.URLMapScalarFieldEnum = makeEnum({
  Id: 'Id',
  URL: 'URL',
  URLType: 'URLType',
  HashCode: 'HashCode',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate',
  Repository_Id: 'Repository_Id',
  LinkType: 'LinkType',
  MapurlId: 'MapurlId'
});

exports.Prisma.UserActionsScalarFieldEnum = makeEnum({
  Id: 'Id',
  ActionName: 'ActionName',
  Actionkey: 'Actionkey',
  Resource_id: 'Resource_id',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate',
  Status: 'Status'
});

exports.Prisma.UserGroupConnectorsScalarFieldEnum = makeEnum({
  Id: 'Id',
  UserGroup_Id: 'UserGroup_Id',
  User_Id: 'User_Id',
  Status: 'Status',
  CreatedDate: 'CreatedDate'
});

exports.Prisma.UserGroupsScalarFieldEnum = makeEnum({
  Id: 'Id',
  GroupName: 'GroupName',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate',
  EditFeatures: 'EditFeatures',
  Status: 'Status',
  UserGroups_Role_Id: 'UserGroups_Role_Id',
  IsReadOnly: 'IsReadOnly'
});

exports.Prisma.UserIdentityClaimsScalarFieldEnum = makeEnum({
  Id: 'Id',
  UserId: 'UserId',
  ClaimType: 'ClaimType',
  ClaimValue: 'ClaimValue'
});

exports.Prisma.UserIdentityLoginsScalarFieldEnum = makeEnum({
  LoginProvider: 'LoginProvider',
  ProviderKey: 'ProviderKey',
  ProviderDisplayName: 'ProviderDisplayName',
  UserId: 'UserId'
});

exports.Prisma.UserIdentityRoleClaimsScalarFieldEnum = makeEnum({
  Id: 'Id',
  RoleId: 'RoleId',
  ClaimType: 'ClaimType',
  ClaimValue: 'ClaimValue'
});

exports.Prisma.UserIdentityRolesScalarFieldEnum = makeEnum({
  UserId: 'UserId',
  RoleId: 'RoleId'
});

exports.Prisma.UserIdentityTokensScalarFieldEnum = makeEnum({
  UserId: 'UserId',
  LoginProvider: 'LoginProvider',
  Name: 'Name',
  Value: 'Value'
});

exports.Prisma.UserProfileSettingScalarFieldEnum = makeEnum({
  Id: 'Id',
  UserId: 'UserId',
  RepositoryTechnologyConfiguration: 'RepositoryTechnologyConfiguration',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate'
});

exports.Prisma.UserRoleProfilesScalarFieldEnum = makeEnum({
  Id: 'Id',
  UserRole_Id: 'UserRole_Id',
  Profile_Id: 'Profile_Id',
  Created: 'Created',
  Modified: 'Modified'
});

exports.Prisma.UserRolesScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Description: 'Description',
  UIEnabled: 'UIEnabled'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  Id: 'Id',
  LDAPConnection_Id: 'LDAPConnection_Id',
  FirstName: 'FirstName',
  LastName: 'LastName',
  UserRole_Id: 'UserRole_Id',
  Status: 'Status',
  EmailId: 'EmailId',
  Password: 'Password',
  CreatedDate: 'CreatedDate',
  ModifiedDate: 'ModifiedDate',
  Description: 'Description',
  ProfileImage: 'ProfileImage',
  CreatedBy: 'CreatedBy',
  ModifiedBy: 'ModifiedBy',
  RegistrationMode: 'RegistrationMode',
  Timezone: 'Timezone',
  IsPasswordSet: 'IsPasswordSet',
  IsAdmin: 'IsAdmin',
  ShowHelpText: 'ShowHelpText',
  IdentityProvider_Id: 'IdentityProvider_Id',
  SecPhrase: 'SecPhrase',
  IsReadOnly: 'IsReadOnly',
  UserIdentityRole: 'UserIdentityRole',
  UserName: 'UserName',
  NormalizedUserName: 'NormalizedUserName',
  Email: 'Email',
  NormalizedEmail: 'NormalizedEmail',
  EmailConfirmed: 'EmailConfirmed',
  SecurityStamp: 'SecurityStamp',
  ConcurrencyStamp: 'ConcurrencyStamp',
  PhoneNumber: 'PhoneNumber',
  PhoneNumberConfirmed: 'PhoneNumberConfirmed',
  PasswordHash: 'PasswordHash',
  TwoFactorEnabled: 'TwoFactorEnabled',
  LockoutEnd: 'LockoutEnd',
  LockoutEnabled: 'LockoutEnabled',
  AccessFailedCount: 'AccessFailedCount'
});

exports.Prisma.UserSessionsScalarFieldEnum = makeEnum({
  Id: 'Id',
  UserId: 'UserId',
  IsReservedUser: 'IsReservedUser',
  AccessMode: 'AccessMode',
  IPAddress: 'IPAddress',
  UserAgent: 'UserAgent',
  IsActive: 'IsActive',
  LastRequest: 'LastRequest',
  Created: 'Created',
  Modified: 'Modified',
  UserDisplayName: 'UserDisplayName',
  UserType: 'UserType'
});

exports.Prisma.UserSessionsArchiveScalarFieldEnum = makeEnum({
  Id: 'Id',
  UserId: 'UserId',
  IsReservedUser: 'IsReservedUser',
  AccessMode: 'AccessMode',
  IPAddress: 'IPAddress',
  UserAgent: 'UserAgent',
  IsActive: 'IsActive',
  LastRequest: 'LastRequest',
  Created: 'Created',
  Modified: 'Modified',
  UserDisplayName: 'UserDisplayName',
  UserType: 'UserType'
});

exports.Prisma.UserTokensScalarFieldEnum = makeEnum({
  Id: 'Id',
  UserId: 'UserId',
  RefreshToken: 'RefreshToken',
  CreatedDate: 'CreatedDate'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  AccessRights: 'AccessRights',
  AppIdentityRoles: 'AppIdentityRoles',
  AppStreamConfigurations: 'AppStreamConfigurations',
  AppStreamUserConnectors: 'AppStreamUserConnectors',
  AuditEntities: 'AuditEntities',
  AuditLogs: 'AuditLogs',
  AWSConfigurations: 'AWSConfigurations',
  CreateElementNotifications: 'CreateElementNotifications',
  DashboardReviewUserRoles: 'DashboardReviewUserRoles',
  Dashboards: 'Dashboards',
  DashboardUserDefault: 'DashboardUserDefault',
  DashboardUserGroups: 'DashboardUserGroups',
  DashboardUsers: 'DashboardUsers',
  DashboardWidgetBlocks: 'DashboardWidgetBlocks',
  DashboardWidgetBlockTypes: 'DashboardWidgetBlockTypes',
  DashboardWidgets: 'DashboardWidgets',
  DocumentationRequests: 'DocumentationRequests',
  DomainRestrictions: 'DomainRestrictions',
  EAChangelogAttributes: 'EAChangelogAttributes',
  EAChangelogs: 'EAChangelogs',
  ElementConnectors: 'ElementConnectors',
  ExternalAppAttributeMaster: 'ExternalAppAttributeMaster',
  ExternalAppAttributes: 'ExternalAppAttributes',
  ExternalApps: 'ExternalApps',
  ExternalAppTypes: 'ExternalAppTypes',
  Features: 'Features',
  FilterProfileConnectors: 'FilterProfileConnectors',
  FilterProfiles: 'FilterProfiles',
  GlobalRepositoryConfigurations: 'GlobalRepositoryConfigurations',
  GroupFeatures: 'GroupFeatures',
  GuestSignupSettings: 'GuestSignupSettings',
  IdPConnections: 'IdPConnections',
  LDAPConnections: 'LDAPConnections',
  MDGProfileConnectors: 'MDGProfileConnectors',
  MDGTechnologies: 'MDGTechnologies',
  MenuItemProfileConnectors: 'MenuItemProfileConnectors',
  MenuItemProfiles: 'MenuItemProfiles',
  MenuItemProfileSettings: 'MenuItemProfileSettings',
  MenuViewHistory: 'MenuViewHistory',
  OIDCApplications: 'OIDCApplications',
  OIDCAuthorizations: 'OIDCAuthorizations',
  OIDCScopes: 'OIDCScopes',
  OIDCTokens: 'OIDCTokens',
  Profiles: 'Profiles',
  PropertyMenuItemConnectors: 'PropertyMenuItemConnectors',
  PropertyMenuItems: 'PropertyMenuItems',
  Repositories: 'Repositories',
  RepositoryConnectors: 'RepositoryConnectors',
  RepositoryDBConnections: 'RepositoryDBConnections',
  RequestLogs: 'RequestLogs',
  ReservedUsers: 'ReservedUsers',
  ResourceFiles: 'ResourceFiles',
  Resources: 'Resources',
  ReviewProcesses: 'ReviewProcesses',
  TaggedValues: 'TaggedValues',
  TraceabilityTreeProfiles: 'TraceabilityTreeProfiles',
  TraceabilityTreeViews: 'TraceabilityTreeViews',
  URLMap: 'URLMap',
  UserActions: 'UserActions',
  UserGroupConnectors: 'UserGroupConnectors',
  UserGroups: 'UserGroups',
  UserIdentityClaims: 'UserIdentityClaims',
  UserIdentityLogins: 'UserIdentityLogins',
  UserIdentityRoleClaims: 'UserIdentityRoleClaims',
  UserIdentityRoles: 'UserIdentityRoles',
  UserIdentityTokens: 'UserIdentityTokens',
  UserProfileSetting: 'UserProfileSetting',
  UserRoleProfiles: 'UserRoleProfiles',
  UserRoles: 'UserRoles',
  Users: 'Users',
  UserSessions: 'UserSessions',
  UserSessionsArchive: 'UserSessionsArchive',
  UserTokens: 'UserTokens'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
